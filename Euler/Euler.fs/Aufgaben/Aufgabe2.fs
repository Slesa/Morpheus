namespace Aufgaben

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

[<Interface>]
type Loesung2 =
    abstract member NextFibonacci : int -> int -> int
    abstract member Calculate : int -> int

type Aufgabe2() =

    let fibonacci child grandchild =
        match child with
        | 0 -> 1
        | _ -> child + grandchild


    let rec Calc result limit child grandchild =

        let current = fibonacci child grandchild
        if current > limit then result
        else
            let toAdd = match current % 2 with
            | 0 -> current
            | _ -> 0

            toAdd + (Calc result limit current child)

    interface Loesung2 with

        member this.NextFibonacci child grandchild =
            fibonacci child grandchild

        member this.Calculate limit =
            let result = Calc 0 limit 1 1
            result

    interface Aufgabe with
        
        member this.Title = "Aufgabe 2"
        member this.Run() = 
            let result = (this :> Loesung2).Calculate 4000000
            result.ToString()